// tickExp.v
//
// Author:  Jerry D. Harthcock
// Version:  1.22  May 3, 2020
// Copyright (C) 2020.  All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
//                                                 SYMPL Open-Source                                                  //
//                          HedgeHog Fused Spiking Neural Network Emulator/Compute Engine                             //
//                                    Evaluation and Product Development License                                      //
//                                                                                                                    //
//                                                                                                                    //
// Open-source means:  this source code and this instruction set ("this IP") may be freely downloaded, copied,        //
// modified, distributed and used in accordance with the terms and conditons of the licenses provided herein.         //
//                                                                                                                    //
// Provided that you comply with all the terms and conditions set forth herein, Jerry D. Harthcock ("licensor"),      //
// the original author and exclusive copyright owner of this HedgeHog Fused Spiking Neural Network Emulator/Compute   //
// Engine, including related development software ("this IP"), hereby grants recipient of this IP ("licensee"),       //
// a world-wide, paid-up, non-exclusive license to implement this IP within the programmable fabric of Xilinx Kintex  //
// Ultra Plus brand FPGAs--only--and used only for the purposes of evaluation, education, and development of end      //
// products and related development tools.                                                                            //
//                                                                                                                    //
// Furthermore, limited to the purposes of prototyping, evaluation, characterization and testing of implementations   //
// in a hard, custom or semi-custom ASIC, any university or institution of higher education may have their            //
// implementation of this IP produced for said limited purposes at any foundary of their choosing provided that such  //
// prototypes do not ever wind up in commercial circulation, with this license extending to such foundary and is in   //
// connection with said academic pursuit under the supervision of said university or institution of higher education. //
//                                                                                                                    //
// Any copying, distribution, customization, modification, or derivative work of this IP must include an exact copy   //
// of this license and original copyright notice at the very top of each source file and any derived netlist, and,    //
// in the case of binaries, a printed copy of this license and/or a text format copy in a separate file distributed   //
// with said netlists or binary files having the file name, "LICENSE.txt".  You, the licensee, also agree not to      //
// remove any copyright notices from any source file covered or distributed under this Evaluation and Product         //
// Development License.                                                                                               //
//                                                                                                                    //
// LICENSOR DOES NOT WARRANT OR GUARANTEE THAT YOUR USE OF THIS IP WILL NOT INFRINGE THE RIGHTS OF OTHERS OR          //
// THAT IT IS SUITABLE OR FIT FOR ANY PURPOSE AND THAT YOU, THE LICENSEE, AGREE TO HOLD LICENSOR HARMLESS FROM        //
// ANY CLAIM BROUGHT BY YOU OR ANY THIRD PARTY FOR YOUR SUCH USE.                                                     //
//                                                                                                                    //
// Licensor reserves all his rights, including, but in no way limited to, the right to change or modify the terms     //
// and conditions of this Evaluation and Product Development License anytime without notice of any kind to anyone.    //
// By using this IP for any purpose, licensee agrees to all the terms and conditions set forth in this Evaluation     //
// and Product Development License.                                                                                   //
//                                                                                                                    //
// This Evaluation and Product Development License does not include the right to sell products that incorporate       //
// this IP or any IP derived from this IP. If you would like to obtain such a license, please contact Licensor.       //
//                                                                                                                    //
// Licensor can be contacted at:  SYMPL.gpu@gmail.com or Jerry.Harthcock@gmail.com                                    //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


`timescale 1ns/100ps

module tickExp (
    CLK,
    rden,
    rdaddrs,
    rddata
    );    

input  CLK;
input  rden;
input  [11:0] rdaddrs;
output [15:0] rddata;


(* rom_style = "block" *) reg [15:0] ROMA[255:0];

reg [15:0] rddata;
wire [7:0] rdaddrsClamp;
assign rdaddrsClamp = (rdaddrs[11:0] > 255) ? 255 : rdaddrs[7:0];

initial begin       //convert binary32 representations to binary7/8
    ROMA[ 255-0]  = (32'h3F808040 >> 15) - 16'h4000;  // EXP(0.00390625) = 1.0039138893
    ROMA[ 255-1]  = (32'h3F810101 >> 15) - 16'h4000;  // EXP(0.0078125 ) = 1.0078430972
    ROMA[ 255-2]  = (32'h3F818242 >> 15) - 16'h4000;  // EXP(0.01171875) = 1.0117876836
    ROMA[ 255-3]  = (32'h3F820405 >> 15) - 16'h4000;  // EXP(0.015625  ) = 1.0157477086
    ROMA[ 255-4]  = (32'h3F82864A >> 15) - 16'h4000;  // EXP(0.01953125) = 1.0197232327
    ROMA[ 255-5]  = (32'h3F830912 >> 15) - 16'h4000;  // EXP(0.0234375 ) = 1.0237143166
    ROMA[ 255-6]  = (32'h3F838C5D >> 15) - 16'h4000;  // EXP(0.02734375) = 1.0277210212
    ROMA[ 255-7]  = (32'h3F84102B >> 15) - 16'h4000;  // EXP(0.03125   ) = 1.0317434075
    ROMA[ 255-8]  = (32'h3F84947D >> 15) - 16'h4000;  // EXP(0.03515625) = 1.035781537
    ROMA[ 255-9]  = (32'h3F851954 >> 15) - 16'h4000;  // EXP(0.0390625 ) = 1.0398354713
    ROMA[255-10]  = (32'h3F859EB0 >> 15) - 16'h4000;  // EXP(0.04296875) = 1.0439052723
    ROMA[255-11]  = (32'h3F862492 >> 15) - 16'h4000;  // EXP(0.046875  ) = 1.047991002
    ROMA[255-12]  = (32'h3F86AAF9 >> 15) - 16'h4000;  // EXP(0.05078125) = 1.0520927228
    ROMA[255-13]  = (32'h3F8731E8 >> 15) - 16'h4000;  // EXP(0.0546875 ) = 1.0562104973
    ROMA[255-14]  = (32'h3F87B95D >> 15) - 16'h4000;  // EXP(0.05859375) = 1.0603443883
    ROMA[255-15]  = (32'h3F88415B >> 15) - 16'h4000;  // EXP(0.0625    ) = 1.0644944589
    ROMA[255-16]  = (32'h3F88C9E0 >> 15) - 16'h4000;  // EXP(0.06640625) = 1.0686607724
    ROMA[255-17]  = (32'h3F8952EF >> 15) - 16'h4000;  // EXP(0.0703125 ) = 1.0728433924
    ROMA[255-18]  = (32'h3F89DC86 >> 15) - 16'h4000;  // EXP(0.07421875) = 1.0770423827
    ROMA[255-19]  = (32'h3F8A66A8 >> 15) - 16'h4000;  // EXP(0.078125  ) = 1.0812578074
    ROMA[255-20]  = (32'h3F8AF154 >> 15) - 16'h4000;  // EXP(0.08203125) = 1.0854897309
    ROMA[255-21]  = (32'h3F8B7C8B >> 15) - 16'h4000;  // EXP(0.0859375 ) = 1.0897382175
    ROMA[255-22]  = (32'h3F8C084D >> 15) - 16'h4000;  // EXP(0.08984375) = 1.0940033323
    ROMA[255-23]  = (32'h3F8C949C >> 15) - 16'h4000;  // EXP(0.09375   ) = 1.0982851403
    ROMA[255-24]  = (32'h3F8D2177 >> 15) - 16'h4000;  // EXP(0.09765625) = 1.1025837068
    ROMA[255-25]  = (32'h3F8DAEDF >> 15) - 16'h4000;  // EXP(0.1015625 ) = 1.1068990974
    ROMA[255-26]  = (32'h3F8E3CD4 >> 15) - 16'h4000;  // EXP(0.10546875) = 1.111231378
    ROMA[255-27]  = (32'h3F8ECB58 >> 15) - 16'h4000;  // EXP(0.109375  ) = 1.1155806146
    ROMA[255-28]  = (32'h3F8F5A6B >> 15) - 16'h4000;  // EXP(0.11328125) = 1.1199468737
    ROMA[255-29]  = (32'h3F8FEA0D >> 15) - 16'h4000;  // EXP(0.1171875 ) = 1.1243302218
    ROMA[255-30]  = (32'h3F907A40 >> 15) - 16'h4000;  // EXP(0.12109375) = 1.1287307259
    ROMA[255-31]  = (32'h3F910B02 >> 15) - 16'h4000;  // EXP(0.125     ) = 1.1331484531
    ROMA[255-32]  = (32'h3F919C56 >> 15) - 16'h4000;  // EXP(0.12890625) = 1.1375834707
    ROMA[255-33]  = (32'h3F922E3B >> 15) - 16'h4000;  // EXP(0.1328125 ) = 1.1420358465
    ROMA[255-34]  = (32'h3F92C0B2 >> 15) - 16'h4000;  // EXP(0.13671875) = 1.1465056485
    ROMA[255-35]  = (32'h3F9353BD >> 15) - 16'h4000;  // EXP(0.140625  ) = 1.1509929447
    ROMA[255-36]  = (32'h3F93E75A >> 15) - 16'h4000;  // EXP(0.14453125) = 1.1554978037
    ROMA[255-37]  = (32'h3F947B8C >> 15) - 16'h4000;  // EXP(0.1484375 ) = 1.1600202942
    ROMA[255-38]  = (32'h3F951051 >> 15) - 16'h4000;  // EXP(0.15234375) = 1.1645604853
    ROMA[255-39]  = (32'h3F95A5AC >> 15) - 16'h4000;  // EXP(0.15625   ) = 1.1691184462
    ROMA[255-40]  = (32'h3F963B9D >> 15) - 16'h4000;  // EXP(0.16015625) = 1.1736942464
    ROMA[255-41]  = (32'h3F96D224 >> 15) - 16'h4000;  // EXP(0.1640625 ) = 1.1782879558
    ROMA[255-42]  = (32'h3F976941 >> 15) - 16'h4000;  // EXP(0.16796875) = 1.1828996445
    ROMA[255-43]  = (32'h3F9800F6 >> 15) - 16'h4000;  // EXP(0.171875  ) = 1.1875293828
    ROMA[255-44]  = (32'h3F989944 >> 15) - 16'h4000;  // EXP(0.17578125) = 1.1921772414
    ROMA[255-45]  = (32'h3F993229 >> 15) - 16'h4000;  // EXP(0.1796875 ) = 1.1968432911
    ROMA[255-46]  = (32'h3F99CBA8 >> 15) - 16'h4000;  // EXP(0.18359375) = 1.2015276033
    ROMA[255-47]  = (32'h3F9A65C1 >> 15) - 16'h4000;  // EXP(0.1875    ) = 1.2062302494
    ROMA[255-48]  = (32'h3F9B0074 >> 15) - 16'h4000;  // EXP(0.19140625) = 1.2109513011
    ROMA[255-49]  = (32'h3F9B9BC2 >> 15) - 16'h4000;  // EXP(0.1953125 ) = 1.2156908305
    ROMA[255-50]  = (32'h3F9C37AB >> 15) - 16'h4000;  // EXP(0.19921875) = 1.2204489099
    ROMA[255-51]  = (32'h3F9CD431 >> 15) - 16'h4000;  // EXP(0.203125  ) = 1.2252256119
    ROMA[255-52]  = (32'h3F9D7154 >> 15) - 16'h4000;  // EXP(0.20703125) = 1.2300210093
    ROMA[255-53]  = (32'h3F9E0F14 >> 15) - 16'h4000;  // EXP(0.2109375 ) = 1.2348351755
    ROMA[255-54]  = (32'h3F9EAD72 >> 15) - 16'h4000;  // EXP(0.21484375) = 1.2396681837
    ROMA[255-55]  = (32'h3F9F4C6F >> 15) - 16'h4000;  // EXP(0.21875   ) = 1.2445201078
    ROMA[255-56]  = (32'h3F9FEC0C >> 15) - 16'h4000;  // EXP(0.22265625) = 1.2493910217
    ROMA[255-57]  = (32'h3FA08C48 >> 15) - 16'h4000;  // EXP(0.2265625 ) = 1.2542809999
    ROMA[255-58]  = (32'h3FA12D24 >> 15) - 16'h4000;  // EXP(0.23046875) = 1.259190117
    ROMA[255-59]  = (32'h3FA1CEA2 >> 15) - 16'h4000;  // EXP(0.234375  ) = 1.2641184478
    ROMA[255-60]  = (32'h3FA270C2 >> 15) - 16'h4000;  // EXP(0.23828125) = 1.2690660675
    ROMA[255-61]  = (32'h3FA31384 >> 15) - 16'h4000;  // EXP(0.2421875 ) = 1.2740330516
    ROMA[255-62]  = (32'h3FA3B6E9 >> 15) - 16'h4000;  // EXP(0.24609375) = 1.279019476
    ROMA[255-63]  = (32'h3FA45AF2 >> 15) - 16'h4000;  // EXP(0.25      ) = 1.2840254167
    ROMA[255-64]  = (32'h3FA4FF9F >> 15) - 16'h4000;  // EXP(0.25390625) = 1.2890509501
    ROMA[255-65]  = (32'h3FA5A4F1 >> 15) - 16'h4000;  // EXP(0.2578125 ) = 1.2940961528
    ROMA[255-66]  = (32'h3FA64AE9 >> 15) - 16'h4000;  // EXP(0.26171875) = 1.299161102
    ROMA[255-67]  = (32'h3FA6F187 >> 15) - 16'h4000;  // EXP(0.265625  ) = 1.3042458748
    ROMA[255-68]  = (32'h3FA798CC >> 15) - 16'h4000;  // EXP(0.26953125) = 1.3093505488
    ROMA[255-69]  = (32'h3FA840B9 >> 15) - 16'h4000;  // EXP(0.2734375 ) = 1.3144752019
    ROMA[255-70]  = (32'h3FA8E94E >> 15) - 16'h4000;  // EXP(0.27734375) = 1.3196199124
    ROMA[255-71]  = (32'h3FA9928C >> 15) - 16'h4000;  // EXP(0.28125   ) = 1.3247847587
    ROMA[255-72]  = (32'h3FAA3C73 >> 15) - 16'h4000;  // EXP(0.28515625) = 1.3299698197
    ROMA[255-73]  = (32'h3FAAE705 >> 15) - 16'h4000;  // EXP(0.2890625 ) = 1.3351751744
    ROMA[255-74]  = (32'h3FAB9242 >> 15) - 16'h4000;  // EXP(0.29296875) = 1.3404009022
    ROMA[255-75]  = (32'h3FAC3E2A >> 15) - 16'h4000;  // EXP(0.296875  ) = 1.345647083
    ROMA[255-76]  = (32'h3FACEABE >> 15) - 16'h4000;  // EXP(0.30078125) = 1.3509137968
    ROMA[255-77]  = (32'h3FAD9800 >> 15) - 16'h4000;  // EXP(0.3046875 ) = 1.3562011239
    ROMA[255-78]  = (32'h3FAE45EF >> 15) - 16'h4000;  // EXP(0.30859375) = 1.361509145
    ROMA[255-79]  = (32'h3FAEF48C >> 15) - 16'h4000;  // EXP(0.3125    ) = 1.3668379412
    ROMA[255-80]  = (32'h3FAFA3D8 >> 15) - 16'h4000;  // EXP(0.31640625) = 1.3721875936
    ROMA[255-81]  = (32'h3FB053D4 >> 15) - 16'h4000;  // EXP(0.3203125 ) = 1.377558184
    ROMA[255-82]  = (32'h3FB10480 >> 15) - 16'h4000;  // EXP(0.32421875) = 1.3829497943
    ROMA[255-83]  = (32'h3FB1B5DD >> 15) - 16'h4000;  // EXP(0.328125  ) = 1.3883625068
    ROMA[255-84]  = (32'h3FB267EC >> 15) - 16'h4000;  // EXP(0.33203125) = 1.393796404
    ROMA[255-85]  = (32'h3FB31AAD >> 15) - 16'h4000;  // EXP(0.3359375 ) = 1.3992515689
    ROMA[255-86]  = (32'h3FB3CE21 >> 15) - 16'h4000;  // EXP(0.33984375) = 1.4047280847
    ROMA[255-87]  = (32'h3FB48249 >> 15) - 16'h4000;  // EXP(0.34375   ) = 1.4102260349
    ROMA[255-88]  = (32'h3FB53726 >> 15) - 16'h4000;  // EXP(0.34765625) = 1.4157455036
    ROMA[255-89]  = (32'h3FB5ECB8 >> 15) - 16'h4000;  // EXP(0.3515625 ) = 1.4212865748
    ROMA[255-90]  = (32'h3FB6A300 >> 15) - 16'h4000;  // EXP(0.35546875) = 1.4268493332
    ROMA[255-91]  = (32'h3FB759FE >> 15) - 16'h4000;  // EXP(0.359375  ) = 1.4324338636
    ROMA[255-92]  = (32'h3FB811B4 >> 15) - 16'h4000;  // EXP(0.36328125) = 1.4380402512
    ROMA[255-93]  = (32'h3FB8CA22 >> 15) - 16'h4000;  // EXP(0.3671875 ) = 1.4436685816
    ROMA[255-94]  = (32'h3FB98348 >> 15) - 16'h4000;  // EXP(0.37109375) = 1.4493189407
    ROMA[255-95]  = (32'h3FBA3D29 >> 15) - 16'h4000;  // EXP(0.375     ) = 1.4549914146
    ROMA[255-96]  = (32'h3FBAF7C3 >> 15) - 16'h4000;  // EXP(0.37890625) = 1.46068609
    ROMA[255-97]  = (32'h3FBBB318 >> 15) - 16'h4000;  // EXP(0.3828125 ) = 1.4664030537
    ROMA[255-98]  = (32'h3FBC6F29 >> 15) - 16'h4000;  // EXP(0.38671875) = 1.472142393
    ROMA[255-99]  = (32'h3FBD2BF7 >> 15) - 16'h4000;  // EXP(0.390625  ) = 1.4779041954
    ROMA[255-100] = (32'h3FBDE982 >> 15) - 16'h4000;  // EXP(0.39453125) = 1.4836885489
    ROMA[255-101] = (32'h3FBEA7CA >> 15) - 16'h4000;  // EXP(0.3984375 ) = 1.4894955417
    ROMA[255-102] = (32'h3FBF66D1 >> 15) - 16'h4000;  // EXP(0.40234375) = 1.4953252624
    ROMA[255-103] = (32'h3FC02698 >> 15) - 16'h4000;  // EXP(0.40625   ) = 1.5011778
    ROMA[255-104] = (32'h3FC0E71F >> 15) - 16'h4000;  // EXP(0.41015625) = 1.5070532438
    ROMA[255-105] = (32'h3FC1A867 >> 15) - 16'h4000;  // EXP(0.4140625 ) = 1.5129516834
    ROMA[255-106] = (32'h3FC26A70 >> 15) - 16'h4000;  // EXP(0.41796875) = 1.5188732089
    ROMA[255-107] = (32'h3FC32D3C >> 15) - 16'h4000;  // EXP(0.421875  ) = 1.5248179105
    ROMA[255-108] = (32'h3FC3F0CB >> 15) - 16'h4000;  // EXP(0.42578125) = 1.5307858791
    ROMA[255-109] = (32'h3FC4B51E >> 15) - 16'h4000;  // EXP(0.4296875 ) = 1.5367772056
    ROMA[255-110] = (32'h3FC57A35 >> 15) - 16'h4000;  // EXP(0.43359375) = 1.5427919815
    ROMA[255-111] = (32'h3FC64012 >> 15) - 16'h4000;  // EXP(0.4375    ) = 1.5488302986
    ROMA[255-112] = (32'h3FC706B6 >> 15) - 16'h4000;  // EXP(0.44140625) = 1.554892249
    ROMA[255-113] = (32'h3FC7CE20 >> 15) - 16'h4000;  // EXP(0.4453125 ) = 1.5609779252
    ROMA[255-114] = (32'h3FC89652 >> 15) - 16'h4000;  // EXP(0.44921875) = 1.5670874201
    ROMA[255-115] = (32'h3FC95F4D >> 15) - 16'h4000;  // EXP(0.453125  ) = 1.5732208268
    ROMA[255-116] = (32'h3FCA2911 >> 15) - 16'h4000;  // EXP(0.45703125) = 1.579378239
    ROMA[255-117] = (32'h3FCAF39F >> 15) - 16'h4000;  // EXP(0.4609375 ) = 1.5855597507
    ROMA[255-118] = (32'h3FCBBEF8 >> 15) - 16'h4000;  // EXP(0.46484375) = 1.5917654561
    ROMA[255-119] = (32'h3FCC8B1D >> 15) - 16'h4000;  // EXP(0.46875   ) = 1.59799545
    ROMA[255-120] = (32'h3FCD580F >> 15) - 16'h4000;  // EXP(0.47265625) = 1.6042498273
    ROMA[255-121] = (32'h3FCE25CE >> 15) - 16'h4000;  // EXP(0.4765625 ) = 1.6105286836
    ROMA[255-122] = (32'h3FCEF45B >> 15) - 16'h4000;  // EXP(0.48046875) = 1.6168321146
    ROMA[255-123] = (32'h3FCFC3B7 >> 15) - 16'h4000;  // EXP(0.484375  ) = 1.6231602166
    ROMA[255-124] = (32'h3FD093E3 >> 15) - 16'h4000;  // EXP(0.48828125) = 1.6295130861
    ROMA[255-125] = (32'h3FD164DF >> 15) - 16'h4000;  // EXP(0.4921875 ) = 1.63589082
    ROMA[255-126] = (32'h3FD236AD >> 15) - 16'h4000;  // EXP(0.49609375) = 1.6422935156
    ROMA[255-127] = (32'h3FD3094C >> 15) - 16'h4000;  // EXP(0.5       ) = 1.6487212707
    ROMA[255-128] = (32'h3FD3DCBF >> 15) - 16'h4000;  // EXP(0.50390625) = 1.6551741833
    ROMA[255-129] = (32'h3FD4B106 >> 15) - 16'h4000;  // EXP(0.5078125 ) = 1.6616523519
    ROMA[255-130] = (32'h3FD58622 >> 15) - 16'h4000;  // EXP(0.51171875) = 1.6681558753
    ROMA[255-131] = (32'h3FD65C13 >> 15) - 16'h4000;  // EXP(0.515625  ) = 1.6746848528
    ROMA[255-132] = (32'h3FD732DA >> 15) - 16'h4000;  // EXP(0.51953125) = 1.681239384
    ROMA[255-133] = (32'h3FD80A79 >> 15) - 16'h4000;  // EXP(0.5234375 ) = 1.6878195689
    ROMA[255-134] = (32'h3FD8E2EF >> 15) - 16'h4000;  // EXP(0.52734375) = 1.6944255079
    ROMA[255-135] = (32'h3FD9BC3F >> 15) - 16'h4000;  // EXP(0.53125   ) = 1.7010573018
    ROMA[255-136] = (32'h3FDA9668 >> 15) - 16'h4000;  // EXP(0.53515625) = 1.7077150519
    ROMA[255-137] = (32'h3FDB716C >> 15) - 16'h4000;  // EXP(0.5390625 ) = 1.7143988596
    ROMA[255-138] = (32'h3FDC4D4B >> 15) - 16'h4000;  // EXP(0.54296875) = 1.721108827
    ROMA[255-139] = (32'h3FDD2A07 >> 15) - 16'h4000;  // EXP(0.546875  ) = 1.7278450565
    ROMA[255-140] = (32'h3FDE07A0 >> 15) - 16'h4000;  // EXP(0.55078125) = 1.7346076509
    ROMA[255-141] = (32'h3FDEE616 >> 15) - 16'h4000;  // EXP(0.5546875 ) = 1.7413967133
    ROMA[255-142] = (32'h3FDFC56C >> 15) - 16'h4000;  // EXP(0.55859375) = 1.7482123473
    ROMA[255-143] = (32'h3FE0A5A2 >> 15) - 16'h4000;  // EXP(0.5625    ) = 1.755054657
    ROMA[255-144] = (32'h3FE186B8 >> 15) - 16'h4000;  // EXP(0.56640625) = 1.7619237467
    ROMA[255-145] = (32'h3FE268AF >> 15) - 16'h4000;  // EXP(0.5703125 ) = 1.7688197212
    ROMA[255-146] = (32'h3FE34B89 >> 15) - 16'h4000;  // EXP(0.57421875) = 1.7757426859
    ROMA[255-147] = (32'h3FE42F47 >> 15) - 16'h4000;  // EXP(0.578125  ) = 1.7826927463
    ROMA[255-148] = (32'h3FE513E8 >> 15) - 16'h4000;  // EXP(0.58203125) = 1.7896700084
    ROMA[255-149] = (32'h3FE5F96F >> 15) - 16'h4000;  // EXP(0.5859375 ) = 1.7966745787
    ROMA[255-150] = (32'h3FE6DFDB >> 15) - 16'h4000;  // EXP(0.58984375) = 1.8037065642
    ROMA[255-151] = (32'h3FE7C72F >> 15) - 16'h4000;  // EXP(0.59375   ) = 1.8107660721
    ROMA[255-152] = (32'h3FE8AF6A >> 15) - 16'h4000;  // EXP(0.59765625) = 1.8178532101
    ROMA[255-153] = (32'h3FE9988E >> 15) - 16'h4000;  // EXP(0.6015625 ) = 1.8249680864
    ROMA[255-154] = (32'h3FEA829B >> 15) - 16'h4000;  // EXP(0.60546875) = 1.8321108096
    ROMA[255-155] = (32'h3FEB6D93 >> 15) - 16'h4000;  // EXP(0.609375  ) = 1.8392814885
    ROMA[255-156] = (32'h3FEC5977 >> 15) - 16'h4000;  // EXP(0.61328125) = 1.8464802327
    ROMA[255-157] = (32'h3FED4647 >> 15) - 16'h4000;  // EXP(0.6171875 ) = 1.853707152
    ROMA[255-158] = (32'h3FEE3404 >> 15) - 16'h4000;  // EXP(0.62109375) = 1.8609623567
    ROMA[255-159] = (32'h3FEF22AF >> 15) - 16'h4000;  // EXP(0.625     ) = 1.8682459574
    ROMA[255-160] = (32'h3FF01249 >> 15) - 16'h4000;  // EXP(0.62890625) = 1.8755580654
    ROMA[255-161] = (32'h3FF102D4 >> 15) - 16'h4000;  // EXP(0.6328125 ) = 1.8828987921
    ROMA[255-162] = (32'h3FF1F44F >> 15) - 16'h4000;  // EXP(0.63671875) = 1.8902682496
    ROMA[255-163] = (32'h3FF2E6BD >> 15) - 16'h4000;  // EXP(0.640625  ) = 1.8976665503
    ROMA[255-164] = (32'h3FF3DA1D >> 15) - 16'h4000;  // EXP(0.64453125) = 1.9050938072
    ROMA[255-165] = (32'h3FF4CE71 >> 15) - 16'h4000;  // EXP(0.6484375 ) = 1.9125501336
    ROMA[255-166] = (32'h3FF5C3BA >> 15) - 16'h4000;  // EXP(0.65234375) = 1.9200356431
    ROMA[255-167] = (32'h3FF6B9F9 >> 15) - 16'h4000;  // EXP(0.65625   ) = 1.9275504502
    ROMA[255-168] = (32'h3FF7B12F >> 15) - 16'h4000;  // EXP(0.66015625) = 1.9350946693
    ROMA[255-169] = (32'h3FF8A95C >> 15) - 16'h4000;  // EXP(0.6640625 ) = 1.9426684157
    ROMA[255-170] = (32'h3FF9A282 >> 15) - 16'h4000;  // EXP(0.66796875) = 1.9502718049
    ROMA[255-171] = (32'h3FFA9CA1 >> 15) - 16'h4000;  // EXP(0.671875  ) = 1.9579049529
    ROMA[255-172] = (32'h3FFB97BB >> 15) - 16'h4000;  // EXP(0.67578125) = 1.9655679763
    ROMA[255-173] = (32'h3FFC93D1 >> 15) - 16'h4000;  // EXP(0.6796875 ) = 1.9732609918
    ROMA[255-174] = (32'h3FFD90E3 >> 15) - 16'h4000;  // EXP(0.68359375) = 1.980984117
    ROMA[255-175] = (32'h3FFE8EF3 >> 15) - 16'h4000;  // EXP(0.6875    ) = 1.9887374696
    ROMA[255-176] = (32'h3FFF8E01 >> 15) - 16'h4000;  // EXP(0.69140625) = 1.996521168
    ROMA[255-177] = (32'h40004708 >> 15) - 16'h4000;  // EXP(0.6953125 ) = 2.0043353309
    ROMA[255-178] = (32'h4000C78F >> 15) - 16'h4000;  // EXP(0.69921875) = 2.0121800776
    ROMA[255-179] = (32'h40014897 >> 15) - 16'h4000;  // EXP(0.703125  ) = 2.0200555277
    ROMA[255-180] = (32'h4001CA20 >> 15) - 16'h4000;  // EXP(0.70703125) = 2.0279618015
    ROMA[255-181] = (32'h40024C2B >> 15) - 16'h4000;  // EXP(0.7109375 ) = 2.0358990196
    ROMA[255-182] = (32'h4002CEB9 >> 15) - 16'h4000;  // EXP(0.71484375) = 2.043867303
    ROMA[255-183] = (32'h400351C9 >> 15) - 16'h4000;  // EXP(0.71875   ) = 2.0518667735
    ROMA[255-184] = (32'h4003D55D >> 15) - 16'h4000;  // EXP(0.72265625) = 2.059897553
    ROMA[255-185] = (32'h40045974 >> 15) - 16'h4000;  // EXP(0.7265625 ) = 2.067959764
    ROMA[255-186] = (32'h4004DE10 >> 15) - 16'h4000;  // EXP(0.73046875) = 2.0760535297
    ROMA[255-187] = (32'h40056330 >> 15) - 16'h4000;  // EXP(0.734375  ) = 2.0841789735
    ROMA[255-188] = (32'h4005E8D6 >> 15) - 16'h4000;  // EXP(0.73828125) = 2.0923362194
    ROMA[255-189] = (32'h40066F02 >> 15) - 16'h4000;  // EXP(0.7421875 ) = 2.1005253918
    ROMA[255-190] = (32'h4006F5B4 >> 15) - 16'h4000;  // EXP(0.74609375) = 2.1087466157
    ROMA[255-191] = (32'h40077CEE >> 15) - 16'h4000;  // EXP(0.75      ) = 2.1170000166
    ROMA[255-192] = (32'h400804AE >> 15) - 16'h4000;  // EXP(0.75390625) = 2.1252857204
    ROMA[255-193] = (32'h40088CF7 >> 15) - 16'h4000;  // EXP(0.7578125 ) = 2.1336038535
    ROMA[255-194] = (32'h400915C9 >> 15) - 16'h4000;  // EXP(0.76171875) = 2.1419545429
    ROMA[255-195] = (32'h40099F23 >> 15) - 16'h4000;  // EXP(0.765625  ) = 2.150337916
    ROMA[255-196] = (32'h400A2907 >> 15) - 16'h4000;  // EXP(0.76953125) = 2.1587541006
    ROMA[255-197] = (32'h400AB375 >> 15) - 16'h4000;  // EXP(0.7734375 ) = 2.1672032253
    ROMA[255-198] = (32'h400B3E6E >> 15) - 16'h4000;  // EXP(0.77734375) = 2.1756854189
    ROMA[255-199] = (32'h400BC9F2 >> 15) - 16'h4000;  // EXP(0.78125   ) = 2.1842008108
    ROMA[255-200] = (32'h400C5602 >> 15) - 16'h4000;  // EXP(0.78515625) = 2.1927495311
    ROMA[255-201] = (32'h400CE29E >> 15) - 16'h4000;  // EXP(0.7890625 ) = 2.2013317101
    ROMA[255-202] = (32'h400D6FC8 >> 15) - 16'h4000;  // EXP(0.79296875) = 2.2099474788
    ROMA[255-203] = (32'h400DFD7E >> 15) - 16'h4000;  // EXP(0.796875  ) = 2.2185969687
    ROMA[255-204] = (32'h400E8BC3 >> 15) - 16'h4000;  // EXP(0.80078125) = 2.2272803117
    ROMA[255-205] = (32'h400F1A96 >> 15) - 16'h4000;  // EXP(0.8046875 ) = 2.2359976404
    ROMA[255-206] = (32'h400FA9F8 >> 15) - 16'h4000;  // EXP(0.80859375) = 2.2447490877
    ROMA[255-207] = (32'h401039EA >> 15) - 16'h4000;  // EXP(0.8125    ) = 2.2535347872
    ROMA[255-208] = (32'h4010CA6C >> 15) - 16'h4000;  // EXP(0.81640625) = 2.262354873
    ROMA[255-209] = (32'h40115B7F >> 15) - 16'h4000;  // EXP(0.8203125 ) = 2.2712094796
    ROMA[255-210] = (32'h4011ED23 >> 15) - 16'h4000;  // EXP(0.82421875) = 2.2800987422
    ROMA[255-211] = (32'h40127F59 >> 15) - 16'h4000;  // EXP(0.828125  ) = 2.2890227963
    ROMA[255-212] = (32'h40131222 >> 15) - 16'h4000;  // EXP(0.83203125) = 2.2979817782
    ROMA[255-213] = (32'h4013A57E >> 15) - 16'h4000;  // EXP(0.8359375 ) = 2.3069758246
    ROMA[255-214] = (32'h4014396D >> 15) - 16'h4000;  // EXP(0.83984375) = 2.3160050727
    ROMA[255-215] = (32'h4014CDF1 >> 15) - 16'h4000;  // EXP(0.84375   ) = 2.3250696603
    ROMA[255-216] = (32'h40156309 >> 15) - 16'h4000;  // EXP(0.84765625) = 2.3341697256
    ROMA[255-217] = (32'h4015F8B7 >> 15) - 16'h4000;  // EXP(0.8515625 ) = 2.3433054076
    ROMA[255-218] = (32'h40168EFB >> 15) - 16'h4000;  // EXP(0.85546875) = 2.3524768457
    ROMA[255-219] = (32'h401725D5 >> 15) - 16'h4000;  // EXP(0.859375  ) = 2.3616841797
    ROMA[255-220] = (32'h4017BD47 >> 15) - 16'h4000;  // EXP(0.86328125) = 2.3709275503
    ROMA[255-221] = (32'h40185550 >> 15) - 16'h4000;  // EXP(0.8671875 ) = 2.3802070983
    ROMA[255-222] = (32'h4018EDF2 >> 15) - 16'h4000;  // EXP(0.87109375) = 2.3895229655
    ROMA[255-223] = (32'h4019872C >> 15) - 16'h4000;  // EXP(0.875     ) = 2.398875294
    ROMA[255-224] = (32'h401A2100 >> 15) - 16'h4000;  // EXP(0.87890625) = 2.4082642264
    ROMA[255-225] = (32'h401ABB6E >> 15) - 16'h4000;  // EXP(0.8828125 ) = 2.4176899061
    ROMA[255-226] = (32'h401B5677 >> 15) - 16'h4000;  // EXP(0.88671875) = 2.4271524768
    ROMA[255-227] = (32'h401BF21C >> 15) - 16'h4000;  // EXP(0.890625  ) = 2.436652083
    ROMA[255-228] = (32'h401C8E5C >> 15) - 16'h4000;  // EXP(0.89453125) = 2.4461888696
    ROMA[255-229] = (32'h401D2B38 >> 15) - 16'h4000;  // EXP(0.8984375 ) = 2.4557629822
    ROMA[255-230] = (32'h401DC8B2 >> 15) - 16'h4000;  // EXP(0.90234375) = 2.4653745667
    ROMA[255-231] = (32'h401E66CA >> 15) - 16'h4000;  // EXP(0.90625   ) = 2.47502377
    ROMA[255-232] = (32'h401F0580 >> 15) - 16'h4000;  // EXP(0.91015625) = 2.4847107391
    ROMA[255-233] = (32'h401FA4D5 >> 15) - 16'h4000;  // EXP(0.9140625 ) = 2.494435622
    ROMA[255-234] = (32'h402044CA >> 15) - 16'h4000;  // EXP(0.91796875) = 2.504198567
    ROMA[255-235] = (32'h4020E55F >> 15) - 16'h4000;  // EXP(0.921875  ) = 2.513999723
    ROMA[255-236] = (32'h40218695 >> 15) - 16'h4000;  // EXP(0.92578125) = 2.5238392397
    ROMA[255-237] = (32'h4022286C >> 15) - 16'h4000;  // EXP(0.9296875 ) = 2.5337172672
    ROMA[255-238] = (32'h4022CAE6 >> 15) - 16'h4000;  // EXP(0.93359375) = 2.5436339562
    ROMA[255-239] = (32'h40236E02 >> 15) - 16'h4000;  // EXP(0.9375    ) = 2.5535894581
    ROMA[255-240] = (32'h402411C2 >> 15) - 16'h4000;  // EXP(0.94140625) = 2.5635839246
    ROMA[255-241] = (32'h4024B626 >> 15) - 16'h4000;  // EXP(0.9453125 ) = 2.5736175084
    ROMA[255-242] = (32'h40255B2F >> 15) - 16'h4000;  // EXP(0.94921875) = 2.5836903625
    ROMA[255-243] = (32'h402600DD >> 15) - 16'h4000;  // EXP(0.953125  ) = 2.5938026407
    ROMA[255-244] = (32'h4026A731 >> 15) - 16'h4000;  // EXP(0.95703125) = 2.6039544972
    ROMA[255-245] = (32'h40274E2B >> 15) - 16'h4000;  // EXP(0.9609375 ) = 2.6141460869
    ROMA[255-246] = (32'h4027F5CD >> 15) - 16'h4000;  // EXP(0.96484375) = 2.6243775654
    ROMA[255-247] = (32'h40289E17 >> 15) - 16'h4000;  // EXP(0.96875   ) = 2.6346490888
    ROMA[255-248] = (32'h4029470A >> 15) - 16'h4000;  // EXP(0.97265625) = 2.6449608138
    ROMA[255-249] = (32'h4029F0A6 >> 15) - 16'h4000;  // EXP(0.9765625 ) = 2.6553128977
    ROMA[255-250] = (32'h402A9AEB >> 15) - 16'h4000;  // EXP(0.98046875) = 2.6657054986
    ROMA[255-251] = (32'h402B45DC >> 15) - 16'h4000;  // EXP(0.984375  ) = 2.6761387749
    ROMA[255-252] = (32'h402BF177 >> 15) - 16'h4000;  // EXP(0.98828125) = 2.6866128859
    ROMA[255-253] = (32'h402C9DBF >> 15) - 16'h4000;  // EXP(0.9921875 ) = 2.6971279914
    ROMA[255-254] = (32'h402D4AB3 >> 15) - 16'h4000;  // EXP(0.99609375) = 2.7076842519
    ROMA[255-255] = (32'h402DF854 >> 15) - 16'h4000;  // EXP(1         ) = 2.7182818285
 end                                                     
                                                         
                                                         
always @(posedge CLK) begin
    if (rden) rddata <=  ROMA[rdaddrsClamp];
end


endmodule    
